const express = require('express');
const app = express();
const server = require('http').Server(app);
const io = require('socket.io')(server);

const { addUser, removeUser, findConnectedUsers } = require('../roomActions');
const {
  loadMessages,
  sendMessage,
  setMessageToUnread
} = require('../messageActions');

io.on('connection', (socket) => {
  socket.on('join', async ({ userId }) => {
    // socket.id is auto generated by socket, regenerated at every connection.
    //  This is also the name of the room that the Socket automatically joins on connection
    console.log('userId', userId);
    const users = await addUser(userId, socket.id);
    console.log(users);

    // Sending back all the users other than the logged in user who has made the connection
    setInterval(() => {
      socket.emit('connectedUsers', {
        users: users.filter((user) => user.userId !== userId)
      });
    }, 10000);
  });

  socket.on('loadMessages', async ({ userId, messagesWith }) => {
    const { chat, error } = await loadMessages(userId, messagesWith);
    if (!error) {
      socket.emit('messagesLoaded', { chat });
    } else {
      socket.emit('noChatFound');
      console.log(error);
    }
  });

  socket.on('sendMessage', async ({ userId, messageSentTo, msg }) => {
    const { newMessage, error } = await sendMessage(userId, messageSentTo, msg);
    // check if user is online, if he is , then we'll directly send the message to the user
    console.log('before');
    const receiverSocket = findConnectedUsers(messageSentTo);
    if (receiverSocket) {
      console.log('after', receiverSocket, newMessage, 'new');

      // Send message to the specific user , so io.to()
      io.to(receiverSocket.socketId).emit('newMsgReceived', { newMessage });
      console.log('sent success');
    } else {
      // else we're setting unreadMessage to true so when the user logs in , he'll realise
      console.log('no');
      await setMessageToUnread(messageSentTo);
    }
    if (!error) {
      socket.emit('messageSent', { newMessage });
    } else {
      console.log(error);
    }
  });

  socket.on('disconnected', () => {
    removeUser(socket.id);
    console.log('user disconnected');
  });
});

module.exports = io;
